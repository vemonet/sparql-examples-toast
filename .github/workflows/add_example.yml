name: Validate SPARQL Query from Issue

# https://github.com/vemonet/sparql-examples-toast/blob/master/examples/UniProt/3_entry_sequences_organism.ttl

permissions:
  issues: write
  contents: write
  pull-requests: write
# NOTE: You will need to enable action to create PRs in your org and repo settings
# Allow GitHub Actions to create and approve pull requests


on:
  issues:
    types: [opened]

jobs:
  validate_query:
    runs-on: ubuntu-latest
    if: contains(github.event.issue.labels.*.name, 'add-example')

    steps:
    - name: Check out repository
      uses: actions/checkout@v5

    - name: Set up Java
      uses: actions/setup-java@v5
      with:
        distribution: 'temurin'
        java-version: '21'

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    # - name: Download SPARQL examples utils
    #   run: wget "https://github.com/sib-swiss/sparql-examples-utils/releases/download/v2.0.20/sparql-examples-utils-2.0.20-uber.jar" -O sparql-examples-utils.jar

    - name: Parse issue and create turtle file
      id: create_turtle
      run: java -jar sparql-examples-utils.jar import-github-issue -i ./examples -t tmp
      env:
        GITHUB_ISSUE_BODY: ${{ github.event.issue.body }}

    - name: Show turtle file content
      run: |
        ls -alh examples
      # echo "Content of ${{ steps.create_turtle.outputs.turtle_file }}:"
      # cat "${{ steps.create_turtle.outputs.turtle_file }}"

    - name: Validate SPARQL query
      id: validate
      run: |
        echo "Running validation on examples/tmp directory..."
        # Run validation only on the tmp directory
        if java -jar sparql-examples-utils.jar test -i ./examples -p tmp --also-run-slow-tests; then
          echo "‚úÖ Validation successful!"
          exit 0
        else
          echo "‚ùå Validation failed!"
          exit 1
        fi

    - name: Create pull request with validated query
      if: success()
      uses: peter-evans/create-pull-request@v6
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "Add SPARQL query example: ${{ steps.create_turtle.outputs.target_filepath }} (from issue #${{ github.event.issue.number }})"
        title: "Add example: ${{ steps.create_turtle.outputs.target_filepath }}"
        body: |
          ## üîç SPARQL Query Addition

          This PR adds a validated SPARQL query from issue #${{ github.event.issue.number }}.

          **File added:** `examples/${{ steps.create_turtle.outputs.target_filepath }}`

          **Related issue:** Closes #${{ github.event.issue.number }}

          This PR was automatically created after successful validation and execution of the SPARQL query.
        branch: add-example-${{ github.event.issue.number }}
        delete-branch: true
        labels: |
          add-example
          automated-pr

    - name: Comment on successful validation
      if: success()
      uses: actions/github-script@v7
      with:
        script: |
          const targetPath = '${{ steps.create_turtle.outputs.target_filepath }}';
          const issueNumber = context.issue.number;
          const comment = `‚úÖ **Query validation successful!**

          Your SPARQL query has been validated and a pull request has been created for review.

          **üìÅ File location:** \`examples/${targetPath}\`

          The query will be added to the SPARQL examples collection once the pull request is reviewed and merged.

          Thank you for your contribution!`;

          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

    - name: Comment on validation failure
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          const comment = `‚ùå **Query validation failed**

          Unfortunately, your SPARQL query did not pass validation. Please check the following:

          1. **Syntax**: Ensure your SPARQL query syntax is correct
          2. **Prefixes**: Make sure all prefixes used in the query are properly defined
          3. **Endpoint compatibility**: Verify that your query is compatible with the selected endpoint

          **Validation details:**
          The validation was performed using the sparql-examples-utils tool. Common issues include:
          - Missing or incorrect PREFIX declarations
          - Syntax errors in the SPARQL query
          - Use of features not supported by the target endpoint

          Please fix the issues and update your query in this issue, or create a new issue with the corrected version. The validation will run again automatically.`;

          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

    - name: Clean up temporary files
      if: always()
      run: |
        rm -rf examples/tmp
