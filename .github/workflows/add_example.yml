name: Add SPARQL query example
on:
  issues:
    types: [opened]

permissions:
  issues: write
  contents: write
  pull-requests: write
# NOTE: You will need to enable action to create PRs in your org and repo settings
# "Allow GitHub Actions to create and approve pull requests"

jobs:
  add_example:
    runs-on: ubuntu-latest
    if: contains(github.event.issue.labels.*.name, 'add-example')

    steps:
    - name: Check out repository
      uses: actions/checkout@v5

    - name: Set up Java
      uses: actions/setup-java@v5
      with:
        distribution: 'temurin'
        java-version: '21'

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Download SPARQL examples utils
      run: wget https://github.com/vemonet/sparql-examples-utils/releases/download/0.0.1/sparql-examples-utils-2.0.23-SNAPSHOT-uber.jar -O sparql-examples-utils.jar
      # run: wget "https://github.com/sib-swiss/sparql-examples-utils/releases/download/v2.0.22/sparql-examples-utils-2.0.22-uber.jar" -O sparql-examples-utils.jar

    - name: Parse issue and create turtle file
      id: create_ttl
      run: |
        GITHUB_OUTPUT=$(java -jar sparql-examples-utils.jar import-github-issue -i ./examples -t tmp 2> error.log)
      env:
        GITHUB_ISSUE_BODY: ${{ github.event.issue.body }}


    - name: Validate SPARQL query
      id: validate
      if: success()
      run: |
        java -jar sparql-examples-utils.jar test -i ./examples -p tmp --also-run-slow-tests 2> error.log


    - name: Clean up temporary files
      if: success()
      run: |
        echo ${GITHUB_OUTPUT}
        rm -rf examples/tmp

    - name: Create pull request with validated query
      if: success()
      uses: peter-evans/create-pull-request@v7
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "Add SPARQL query example: ${{ steps.create_ttl.outputs.output_file }} (from issue #${{ github.event.issue.number }})"
        title: "Add example: ${{ steps.create_ttl.outputs.output_file }}"
        body: |
          ## Adding SPARQL Query

          This PR adds a validated SPARQL query `examples/${{ steps.create_ttl.outputs.output_file }}` submitted in issue #${{ github.event.issue.number }}.

          > ${{ steps.create_ttl.outputs.query_description }}

          This PR was automatically created after successful validation and execution of the SPARQL query.

          Closes #${{ github.event.issue.number }}
        branch: add-example-${{ github.event.issue.number }}
        delete-branch: true
        labels: |
          add-example
          automated-pr

    - name: Comment on successful validation
      if: success()
      uses: actions/github-script@v8
      with:
        script: |
          const targetPath = '${{ steps.create_ttl.outputs.output_file }}';
          const issueNumber = context.issue.number;
          const comment = `✅ **Query validation successful!**

          Your SPARQL query has been validated and a pull request has been created for review.

          The query will be added to the SPARQL examples collection once the pull request is reviewed and merged.

          Thank you for your contribution!`;

          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

    - name: Comment on validation failure and close issue
      if: failure()
      uses: actions/github-script@v8
      with:
        script: |
          const fs = require('fs');
          let errorMessage = '';
          try {
            const errorLog = fs.readFileSync('error.log', 'utf8');
            if (errorLog.trim()) {
              errorMessage = errorLog.trim();
            }
          } catch (e) {
            errorMessage = 'No error details available';
          }
          const comment = `❌ **Query validation failed**

          Unfortunately, your SPARQL query did not pass validation. Please check the following:

          1. **Syntax**: Ensure your SPARQL query syntax is correct
          2. **Prefixes**: Make sure all prefixes used in the query are properly defined
          3. **Endpoint compatibility**: Verify that your query is compatible with the selected endpoint

          **Validation details:**

          \`\`\`
          ${errorMessage}
          \`\`\`

          Please fix the query, and create a new issue with the corrected version. The validation will run again automatically.

          This issue will be closed automatically. Please create a new issue with the corrected query.`;

          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

          await github.rest.issues.update({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'closed'
          });
